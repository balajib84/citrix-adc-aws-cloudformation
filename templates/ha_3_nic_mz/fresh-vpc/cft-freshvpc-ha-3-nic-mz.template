Description:
  "This template deploys a VPC, with 3 subnets (Management, client, server) for 2 Availability Zones.
  It deploys an Internet Gateway, with a default  route on the public subnets.
  This template also creates a HA pair across Availability Zones with two instance of Citrix ADC:
  3 ENIs associated to 3 VPC subnets (Management, Client, Server) on primary and 3 ENIs associated
  to 3 VPC subnets (Management, Client, Server) on secondary.
  All the resource names created by this CFT will be prefixed with a tagName of the stackname"

Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  InstanceTenancy:
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
    Default: default
    AllowedValues:
      - default
      - dedicated

  PriAvailabilityZone:
    Description: Select the Availability Zone for Primary CitrixADC deployment
    Type: AWS::EC2::AvailabilityZone::Name

  SecAvailabilityZone:
    Description: Select the Availability Zone for Secondary CitrixADC deployment
    Type: AWS::EC2::AvailabilityZone::Name

  PriManagementSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  PriClientSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  PriServerSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.3.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  SecManagementSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.4.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  SecClientSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.5.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  SecServerSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.6.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  CitrixADCImageID:
    Type: String
    Default: ""
    Description: >-
      AMI ID of Citrix ADC to be provisioned. If left empty, "Citrix ADC VPX - Customer Licensed Version 13.0-52.24
      (https://aws.amazon.com/marketplace/pp/B00AA01BOE)" is provisioned by default

  SSHCidrIp:
    Type: String
    MinLength: 9
    MaxLength: 18
    Description: "The IP address range that can SSH to the EC2 instance (port: 22)."
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  HTTPCidrIp:
    Default: 0.0.0.0/0
    Type: String
    MinLength: 9
    MaxLength: 18
    Description: "The IP address range that can HTTP to the EC2 instance (port: 80)."
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  HTTPSCidrIp:
    Default: 0.0.0.0/0
    Type: String
    MinLength: 9
    MaxLength: 18
    Description: "The IP address range that can HTTPS to the EC2 instance (port: 443)."
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  PriManagementIP:
    Default: ""
    Type: String
    Description: >-
      Private IP assigned to the Primary Management ENI (last octet has to be
      between 5 and 254). Leave empty for automatic assignment.

  PriClientIP:
    Default: ""
    Type: String
    Description: >-
      Private IP assigned to the Primary Client ENI (last octet has to be between 5 and
      254). Leave empty for automatic assignment.

  PriServerIP:
    Default: ""
    Type: String
    Description: >-
      Private IP assigned to the Primary Server ENI (last octet has to be between 5 and
      254). Leave empty for automatic assignment.

  SecManagementIP:
    Default: ""
    Type: String
    Description: >-
      Private IP assigned to the Secondary Management ENI (last octet has to be
      between 5 and 254). Leave empty for automatic assignment.

  SecClientIP:
    Default: ""
    Type: String
    Description: >-
      Private IP assigned to the Secondary Client ENI (last octet has to be between 5 and
      254). Leave empty for automatic assignment.

  SecServerIP:
    Default: ""
    Type: String
    Description: >-
      Private IP assigned to the Secondary Server ENI (last octet has to be between 5 and
      254). Leave empty for automatic assignment.

  InstanceType:
    Default: m4.xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
    Type: String
    Description: Type of Citrix ADC instance
    AllowedValues:
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Citrix ADC AMI Image
        Parameters:
          - CitrixADCImageID

      - Label:
          default: VPC Configuration
        Parameters:
          - VpcCIDR
          - SSHCidrIp
          - HTTPCidrIp
          - HTTPSCidrIp

      - Label:
          default: Primary CitrixADC Configuration
        Parameters:
          - PriAvailabilityZone
          - PriManagementSubnetCIDR
          - PriManagementIP
          - PriClientSubnetCIDR
          - PriClientIP
          - PriServerSubnetCIDR
          - PriServerIP

      - Label:
          default: Secondary CitrixADC Configuration
        Parameters:
          - SecAvailabilityZone
          - SecManagementSubnetCIDR
          - SecManagementIP
          - SecClientSubnetCIDR
          - SecClientIP
          - SecServerSubnetCIDR
          - SecServerIP

      - Label:
          default: General Instance Configuration
        Parameters:
          - KeyPairName
          - InstanceType
          - InstanceTenancy

    ParameterLabels:
      CitrixADCImageID:
        default: Citrix ADC AMI ID

      VpcCIDR:
        default: VPC CIDR*
      SSHCidrIp:
        default: Remote SSH CIDR IP*
      HTTPCidrIp:
        default: Remote HTTP CIDR IP*
      HTTPSCidrIp:
        default: Remote HTTPS CIDR IP*

      PriAvailabilityZone:
        default: Primary Availability Zone*
      PriManagementSubnetCIDR:
        default: Primary Management Subnet CIDR*
      PriManagementIP:
        default: Primary Management Private IP
      PriClientSubnetCIDR:
        default: Primary Client Subnet CIDR*
      PriClientIP:
        default: Primary Client Private IP
      PriServerSubnetCIDR:
        default: Primary Server Subnet CIDR*
      PriServerIP:
        default: Primary Server Private IP

      SecAvailabilityZone:
        default: Secondary Availability Zone*
      SecManagementSubnetCIDR:
        default: Secondary Management Subnet CIDR*
      SecManagementIP:
        default: Secondary Management Private IP
      SecClientSubnetCIDR:
        default: Secondary Client Subnet CIDR*
      SecClientIP:
        default: Secondary Client Private IP
      SecServerSubnetCIDR:
        default: Secondary Server Subnet CIDR*
      SecServerIP:
        default: Secondary Server Private IP

      KeyPairName:
        default: Key Pair*
      InstanceType:
        default: Instance Type*
      InstanceTenancy:
        default: Tenancy Model*

Conditions:
  UseCitrixADCImageID: !Not
    - !Equals
      - !Ref CitrixADCImageID
      - ""

  UsePriManagementIP: !Not
    - !Equals
      - !Ref PriManagementIP
      - ""

  UsePriClientIP: !Not
    - !Equals
      - !Ref PriClientIP
      - ""

  UsePriServerIP: !Not
    - !Equals
      - !Ref PriServerIP
      - ""

  UseSecManagementIP: !Not
    - !Equals
      - !Ref SecManagementIP
      - ""

  UseSecClientIP: !Not
    - !Equals
      - !Ref SecClientIP
      - ""

  UseSecServerIP: !Not
    - !Equals
      - !Ref SecServerIP
      - ""

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: !Ref InstanceTenancy
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PriManagementSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref PriAvailabilityZone
      CidrBlock: !Ref PriManagementSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Primary Management Subnet

  PriClientSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref PriAvailabilityZone
      CidrBlock: !Ref PriClientSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Primary Client Subnet

  PriServerSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref PriAvailabilityZone
      CidrBlock: !Ref PriServerSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Primary Server Subnet

  SecManagementSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SecAvailabilityZone
      CidrBlock: !Ref SecManagementSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Secondary Management Subnet

  SecClientSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SecAvailabilityZone
      CidrBlock: !Ref SecClientSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Secondary Client Subnet

  SecServerSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SecAvailabilityZone
      CidrBlock: !Ref SecServerSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Secondary Server Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PriManagementSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PriManagementSubnet

  PriClientSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PriClientSubnet

  SecManagementSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SecManagementSubnet

  SecClientSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SecClientSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PriServerSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PriServerSubnet

  SecServerSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SecServerSubnet

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} SecurityGroup
      GroupDescription: "Enable SSH access via port 22, HTTP with port 80 and HTTPS with port 443"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCidrIp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref HTTPCidrIp
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref HTTPSCidrIp

  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId
      GroupId: !GetAtt SecurityGroup.GroupId

  CitrixNodesInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} InstanceRole
      Path: /
      Policies:
        - PolicyName: Citrixnode
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "ec2:DescribeAddresses"
                  - "ec2:AssociateAddress"
                  - "ec2:DisassociateAddress"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DetachNetworkInterface"
                  - "ec2:AttachNetworkInterface"
                  - "ec2:StopInstances"
                  - "ec2:StartInstances"
                  - "ec2:RebootInstances"
                  - "autoscaling:*"
                  - "sns:*"
                  - "sqs:*"
                  - "iam:GetRole"
                  - "iam:SimulatePrincipalPolicy"
                Resource: "*"
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com

  CitrixNodesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref CitrixNodesInstanceRole

  PriManagementENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} PrimaryManagement
      SubnetId: !Ref PriManagementSubnet
      GroupSet:
        - !Ref SecurityGroup
      Description: ENI connected to Primary Management Subnet
      PrivateIpAddress: !If
        - UsePriManagementIP
        - !Ref PriManagementIP
        - !Ref AWS::NoValue
      # SecondaryPrivateIpAddressCount: 1

  PriClientENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} PrimaryClient
      SubnetId: !Ref PriClientSubnet
      GroupSet:
        - !Ref SecurityGroup
      Description: ENI connected to Primary Client Subnet
      PrivateIpAddress: !If
        - UsePriClientIP
        - !Ref PriClientIP
        - !Ref AWS::NoValue

  PriServerENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} PrimaryServer
      SubnetId: !Ref PriServerSubnet
      GroupSet:
        - !Ref SecurityGroup
      Description: ENI connected to Primary Server Subnet
      PrivateIpAddress: !If
        - UsePriServerIP
        - !Ref PriServerIP
        - !Ref AWS::NoValue

  PriManagementEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  AssociateEipNsip:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref PriManagementENI
      AllocationId: !GetAtt PriManagementEIP.AllocationId

  PriClientEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  AssociateEipClientIP:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref PriClientENI
      AllocationId: !GetAtt PriClientEIP.AllocationId

  PriVPXInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} CitrixADC-Primary
      ImageId: !If
        - UseCitrixADCImageID
        - !Ref CitrixADCImageID
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - CITRIXADC
      KeyName: !Ref KeyPairName
      Tenancy: !Ref InstanceTenancy
      IamInstanceProfile: !Ref CitrixNodesProfile
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - DeviceIndex: "0"
          NetworkInterfaceId: !Ref PriManagementENI
        - DeviceIndex: "1"
          NetworkInterfaceId: !Ref PriClientENI
        - DeviceIndex: "2"
          NetworkInterfaceId: !Ref PriServerENI

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  PriWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: PriVPXInstance
    Properties:
      Count: 0
      Handle: !Ref WaitHandle
      Timeout: "200"

  SecManagementENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} SecondaryManagement
      SubnetId: !Ref SecManagementSubnet
      GroupSet:
        - !Ref SecurityGroup
      Description: ENI connected to Secondary Management Subnet
      PrivateIpAddress: !If
        - UseSecManagementIP
        - !Ref SecManagementIP
        - !Ref AWS::NoValue
      # SecondaryPrivateIpAddressCount: 1

  SecClientENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} SecondaryClient
      SubnetId: !Ref SecClientSubnet
      GroupSet:
        - !Ref SecurityGroup
      Description: ENI connected to Secondary Client Subnet
      PrivateIpAddress: !If
        - UseSecClientIP
        - !Ref SecClientIP
        - !Ref AWS::NoValue
  SecServerENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} SecondaryServer
      SubnetId: !Ref SecServerSubnet
      GroupSet:
        - !Ref SecurityGroup
      Description: ENI connected to Secondary Server Subnet
      PrivateIpAddress: !If
        - UseSecServerIP
        - !Ref SecServerIP
        - !Ref AWS::NoValue
  SecManagementEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  AssociateEipSecNsip:
    Type: AWS::EC2::EIPAssociation
    Properties:
      NetworkInterfaceId: !Ref SecManagementENI
      AllocationId: !GetAtt SecManagementEIP.AllocationId

  SecVPXInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} CitrixADC-Secondary
      ImageId: !If
        - UseCitrixADCImageID
        - !Ref CitrixADCImageID
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - CITRIXADC
      KeyName: !Ref KeyPairName
      Tenancy: !Ref InstanceTenancy
      IamInstanceProfile: !Ref CitrixNodesProfile
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - DeviceIndex: "0"
          NetworkInterfaceId: !Ref SecManagementENI
        - DeviceIndex: "1"
          NetworkInterfaceId: !Ref SecClientENI
        - DeviceIndex: "2"
          NetworkInterfaceId: !Ref SecServerENI
  SecWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: SecVPXInstance
    Properties:
      Count: 0
      Handle: !Ref WaitHandle
      Timeout: "200"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} LambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: lambdalogtocloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:CreateExportTask"
                  - "logs:DescribeExportTask"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: lambdaallowreadec2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeVpcs"
                  - "ec2:DescribeAvailabilityZones"
                  - "ec2:DescribeInstanceStatus"
                Resource: "*"
                Effect: Allow
  ConfigureHAFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} LambdaFunction
      Code:
        S3Bucket: !Join
          - ""
          - - ns-vpx-cft-fn-
            - !Ref AWS::Region
        S3Key: lambda-ha-3-nic-mz.zip
      Handler: lambda-ha-3-nic-mz.lambda_handler
      Runtime: python3.6
      Timeout: 900
      Role: !GetAtt LambdaExecutionRole.Arn
  ConfigureLambda:
    Type: Custom::LambdaHAAZ
    DependsOn:
      - PriWaitCondition
      - SecWaitCondition
    Properties:
      ServiceToken: !GetAtt ConfigureHAFunction.Arn
      PriInstanceID: !Ref PriVPXInstance
      PriPubNSIP: !Ref PriManagementEIP
      PriNSIP: !GetAtt PriManagementENI.PrimaryPrivateIpAddress
      PriVIP: !GetAtt PriClientENI.PrimaryPrivateIpAddress
      PriVIPSubnet: !Ref PriClientSubnet
      SecInstanceID: !Ref SecVPXInstance
      SecPubNSIP: !Ref SecManagementEIP
      SecNSIP: !GetAtt SecManagementENI.PrimaryPrivateIpAddress
      SecVIP: !GetAtt SecClientENI.PrimaryPrivateIpAddress

Outputs:
  PrimaryCitrixADCManagementURL:
    Description: HTTPS URL to the Management GUI of Primary CitrixADC (uses self-signed cert)
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt PriVPXInstance.PublicIp
  PrimaryCitrixADCManagementURL2:
    Description: HTTP URL to the Management GUI of Primary CitrixADC
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt PriVPXInstance.PublicIp
  PrimaryCitrixADCInstanceID:
    Description: Instance Id of newly created Primary CitrixADC instance
    Value: !Ref PriVPXInstance
  PrimaryCitrixADCPublicVIP:
    Description: Elastic IP address of the Primary CitrixADC instance associated with the VIP
    Value: !Ref PriClientEIP
  PrimaryCitrixADCPrivateNSIP:
    Description: Private IP (NS IP) used for management of Primary CitrixADC
    Value: !GetAtt PriVPXInstance.PrivateIp
  PrimaryCitrixADCPublicNSIP:
    Description: Public IP (NS IP) used for management of Primary CitrixADC
    Value: !GetAtt PriVPXInstance.PublicIp
  PrimaryCitrixADCPrivateVIP:
    Description: Private IP address of the Primary CitrixADC instance associated with the VIP
    Value: !GetAtt PriClientENI.PrimaryPrivateIpAddress
  PrimaryCitrixADCSNIP:
    Description: Private IP address of the Primary CitrixADC instance associated with the SNIP
    Value: !GetAtt PriServerENI.PrimaryPrivateIpAddress

  SecondaryCitrixADCManagementURL:
    Description: HTTPS URL to the Management GUI of Secondary CitrixADC (uses self-signed cert)
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt SecVPXInstance.PublicIp
  SecondaryCitrixADCManagementURL2:
    Description: HTTP URL to the Management GUI of Secondary CitrixADC
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt SecVPXInstance.PublicIp
  SecodnaryCitrixADCInstanceID:
    Description: Instance Id of newly created Secondary CitrixADC instance
    Value: !Ref SecVPXInstance
  SecondaryCitrixADCPrivateNSIP:
    Description: Private IP (NS IP) used for management of Secondary CitrixADC
    Value: !GetAtt SecVPXInstance.PrivateIp
  SecondaryCitrixADCPublicNSIP:
    Description: Public IP (NS IP) used for management of Secondary CitrixADC
    Value: !GetAtt SecVPXInstance.PublicIp
  SecondaryCitrixADCPrivateVIP:
    Description: Private IP address of the Secondary CitrixADC instance associated with the VIP
    Value: !GetAtt SecClientENI.PrimaryPrivateIpAddress
  SecondaryCitrixADCSNIP:
    Description: Private IP address of the Secondary CitrixADC instance associated with the SNIP
    Value: !GetAtt SecServerENI.PrimaryPrivateIpAddress

  SecurityGroup:
    Description: Security group ID that the CitrixADC belongs to
    Value: !Ref SecurityGroup

Mappings:
  AWSAMIRegionMap:
    AMI:
      CITRIXADC: Citrix NetScaler and CloudBridge Connector 13.0-52.24-64-63425ded-82f0-4b54-8cdd-6ec8b94bd4f8-ami-05e241fd9b61abb3a.4
    us-gov-west-1:
      CITRIXADC: ami-00d2e361
    us-gov-east-1:
      CITRIXADC: ami-21f11d50
    us-east-2: # US East (Ohio)
      CITRIXADC: ami-0e8e26c508fa94732
    us-east-1: # US East (N. Virginia)
      CITRIXADC: ami-0bb96d1f8f79db909
    us-west-1: # US West (N. California)
      CITRIXADC: ami-0707f52c208d83427
    us-west-2: # US West (Oregon)
      CITRIXADC: ami-0503d15aed657c87d
    ap-east-1: # Asia Pacific (Hong Kong)
      CITRIXADC: ami-0b44e0d299d3b3a33
    ap-south-1: # Asia Pacific (Mumbai)
      CITRIXADC: ami-027978a22dc893058
    ap-northeast-2: # Asia Pacific (Seoul)
      CITRIXADC: ami-0ad520c016e96f260
    ap-southeast-1: # Asia Pacific (Singapore)
      CITRIXADC: ami-0316840d86abe4e5e
    ap-southeast-2: # Asia Pacific (Sydney)
      CITRIXADC: ami-02098e6dfe08d9299
    ap-northeast-1: # Asia Pacific (Tokyo)
      CITRIXADC: ami-0a5d628c2e1ea45e9
    ca-central-1: # Canada (Central)
      CITRIXADC: ami-02cbae7662e592d24
    eu-central-1: # Europe (Frankfurt)
      CITRIXADC: ami-05d81856537a0cfc2
    eu-west-1: # Europe (Ireland)
      CITRIXADC: ami-023da45cff4446484
    eu-west-2: # Europe (London)
      CITRIXADC: ami-037b51b95111f4231
    eu-west-3: # Europe (Paris)
      CITRIXADC: ami-0bd4c025bd6afab4a
    eu-north-1: # Europe (Stockholm)
      CITRIXADC: ami-01672d9e4fd60f85d
    sa-east-1: # South America (São Paulo)
      CITRIXADC: ami-0c66fc6fff94c64b9
