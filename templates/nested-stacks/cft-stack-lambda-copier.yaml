AWSTemplateFormatVersion: '2010-09-09'
Outputs:
  CopyZipsRole:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-CopyZipsRole'
    Value: !Sub 'https://console.aws.amazon.com/iam/home#/roles/${CopyZipsRole}'
  LambdaZipsBucket:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-LambdaZipsBucket'
    Value: !Ref 'LambdaZipsBucket'
Parameters:
  S3BucketName:
    AllowedPattern: ()|^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Description: ''
    Type: String
  S3Key:
    Description: ''
    Type: String
Resources:
  CopyZips:
    Properties:
      DestBucket: !Ref 'LambdaZipsBucket'
      Objects:
        - !Ref 'S3Key'
      Prefix: ''
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      SourceBucket: !Ref 'S3BucketName'
    Type: AWS::CloudFormation::CustomResource
  CopyZipsFunction:
    Properties:
      Code:
        ZipFile: |-
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
      Description: CopyZipsFunction
      Handler: index.handler
      Role: !GetAtt 'CopyZipsRole.Arn'
      Runtime: python3.6
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-CopyZipsFunction'
      Timeout: 30
    Type: AWS::Lambda::Function
  CopyZipsRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Description: ''
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${S3BucketName}/${S3Key}'
            Version: '2012-10-17'
          PolicyName: lambda-copier-get
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${S3Key}'
            Version: '2012-10-17'
          PolicyName: lambda-copier-put
    Type: AWS::IAM::Role
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
