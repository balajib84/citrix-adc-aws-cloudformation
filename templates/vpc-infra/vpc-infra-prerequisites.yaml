AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Availability Zone Configuration
        Parameters:
          - PrimaryAvailabilityZone
          - SecondaryAvailabilityZone
      - Label:
          default: VPC Configuration
        Parameters:
          - VPCCIDR
          - VPCTenancy
      - Label:
          default: Subnet Configuration
        Parameters:
          - PrimaryManagementSubnetCIDR
          - PrimaryClientSubnetCIDR
          - PrimaryServerSubnetCIDR
          - SecondaryManagementSubnetCIDR
          - SecondaryClientSubnetCIDR
          - SecondaryServerSubnetCIDR
    ParameterLabels:
      PrimaryAvailabilityZone:
        default: Primary Availability Zone
      PrimaryClientSubnetCIDR:
        default: Subnet CIDR associated with Primary ADC Client interface
      PrimaryManagementSubnetCIDR:
        default: Subnet CIDR associated with Primary ADC Management interface
      PrimaryServerSubnetCIDR:
        default: Subnet CIDR associated with Primary ADC Client interface
      SecondaryAvailabilityZone:
        default: Secondary Availability Zone
      SecondaryClientSubnetCIDR:
        default: Subnet CIDR associated with Secondary ADC Client interface
      SecondaryManagementSubnetCIDR:
        default: Subnet CIDR associated with Secondary ADC Management interface
      SecondaryServerSubnetCIDR:
        default: Subnet CIDR associated with Secondary ADC Server interface
      VPCCIDR:
        default: VPC CIDR to deploy the resources
      VPCTenancy:
        default: ''
Outputs:
  PrimaryAZNATEIP:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryAZNATEIP'
    Value: !Ref 'PrimaryAZNATEIP'
  PrimaryClientSubnet:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryClientSubnet'
    Value: !Ref 'PrimaryClientSubnet'
  PrimaryManagementSubnet:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryManagementSubnet'
    Value: !Ref 'PrimaryManagementSubnet'
  PrimaryServerSubnet:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryServerSubnet'
    Value: !Ref 'PrimaryServerSubnet'
  PrivatePrimaryManagementRouteTable:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-PrivatePrimaryManagementRouteTable'
    Value: !Ref 'PrivatePrimaryManagementRouteTable'
  PrivatePrimaryServerRouteTable:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-PrivatePrimaryServerRouteTable'
    Value: !Ref 'PrivatePrimaryServerRouteTable'
  PrivateSecondaryManagementRouteTable:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSecondaryManagementRouteTable'
    Value: !Ref 'PrivateSecondaryManagementRouteTable'
  PrivateSecondaryServerRouteTable:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSecondaryServerRouteTable'
    Value: !Ref 'PrivateSecondaryServerRouteTable'
  PublicRouteTable:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-PublicRouteTable'
    Value: !Ref 'PublicRouteTable'
  SecondaryAZNATEIP:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-SecondaryAZNATEIP'
    Value: !Ref 'SecondaryAZNATEIP'
  SecondaryClientSubnet:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-SecondaryClientSubnet'
    Value: !Ref 'SecondaryClientSubnet'
  SecondaryManagementSubnet:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-SecondaryManagementSubnet'
    Value: !Ref 'SecondaryManagementSubnet'
  SecondaryServerSubnet:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-SecondaryServerSubnet'
    Value: !Ref 'SecondaryServerSubnet'
  VPC:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
    Value: !Ref 'VPC'
Parameters:
  PrimaryAvailabilityZone:
    Description: ''
    Type: AWS::EC2::AvailabilityZone::Name
  PrimaryClientSubnetCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: 10.0.2.0/24
    Description: ''
    Type: String
  PrimaryManagementSubnetCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: 10.0.1.0/24
    Description: ''
    Type: String
  PrimaryServerSubnetCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: 10.0.3.0/24
    Description: ''
    Type: String
  SecondaryAvailabilityZone:
    Description: ''
    Type: AWS::EC2::AvailabilityZone::Name
  SecondaryClientSubnetCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: 10.0.5.0/24
    Description: ''
    Type: String
  SecondaryManagementSubnetCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: 10.0.4.0/24
    Description: ''
    Type: String
  SecondaryServerSubnetCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: 10.0.6.0/24
    Description: ''
    Type: String
  VPCCIDR:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: 10.0.0.0/16
    Description: ''
    Type: String
  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: ''
    Type: String
Resources:
  InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
    Type: AWS::EC2::InternetGateway
  PrimaryAZNAT:
    Properties:
      AllocationId: !GetAtt 'PrimaryAZNATEIP.AllocationId'
      SubnetId: !Ref 'PrimaryClientSubnet'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrimaryAZNAT'
    Type: AWS::EC2::NatGateway
  PrimaryAZNATEIP:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrimaryAZNATEIP'
    Type: AWS::EC2::EIP
  PrimaryClientSubnet:
    Properties:
      AvailabilityZone: !Ref 'PrimaryAvailabilityZone'
      CidrBlock: !Ref 'PrimaryClientSubnetCIDR'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrimaryClientSubnet'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrimaryManagementSubnet:
    Properties:
      AvailabilityZone: !Ref 'PrimaryAvailabilityZone'
      CidrBlock: !Ref 'PrimaryManagementSubnetCIDR'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrimaryManagementSubnet'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrimaryServerSubnet:
    Properties:
      AvailabilityZone: !Ref 'PrimaryAvailabilityZone'
      CidrBlock: !Ref 'PrimaryServerSubnetCIDR'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrimaryServerSubnet'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivatePrimaryManagementRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivatePrimaryManagementRouteTable'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivatePrimaryManagementRouteTablePrimaryAZNATRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'PrimaryAZNAT'
      RouteTableId: !Ref 'PrivatePrimaryManagementRouteTable'
    Type: AWS::EC2::Route
  PrivatePrimaryServerRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivatePrimaryServerRouteTable'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivatePrimaryServerRouteTablePrimaryAZNATRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'PrimaryAZNAT'
      RouteTableId: !Ref 'PrivatePrimaryServerRouteTable'
    Type: AWS::EC2::Route
  PrivateRouteTablePrimaryManagementSubnetAssociation:
    Properties:
      RouteTableId: !Ref 'PrivatePrimaryManagementRouteTable'
      SubnetId: !Ref 'PrimaryManagementSubnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateRouteTablePrimaryServerSubnetAssociation:
    Properties:
      RouteTableId: !Ref 'PrivatePrimaryServerRouteTable'
      SubnetId: !Ref 'PrimaryServerSubnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateRouteTableSecondaryManagementSubnetAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateSecondaryManagementRouteTable'
      SubnetId: !Ref 'SecondaryManagementSubnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateRouteTableSecondaryServerSubnetAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateSecondaryServerRouteTable'
      SubnetId: !Ref 'SecondaryServerSubnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSecondaryManagementRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSecondaryManagementRouteTable'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateSecondaryManagementRouteTableSecondaryAZNATRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'SecondaryAZNAT'
      RouteTableId: !Ref 'PrivateSecondaryManagementRouteTable'
    Type: AWS::EC2::Route
  PrivateSecondaryServerRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSecondaryServerRouteTable'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateSecondaryServerRouteTableSecondaryAZNATRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'SecondaryAZNAT'
      RouteTableId: !Ref 'PrivateSecondaryServerRouteTable'
    Type: AWS::EC2::Route
  PublicRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PublicRouteTablePrimaryClientSubnetAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PrimaryClientSubnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicRouteTableSecondaryClientSubnetAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'SecondaryClientSubnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicRouteTableiGWRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: AWS::EC2::Route
  SecondaryAZNAT:
    Properties:
      AllocationId: !GetAtt 'SecondaryAZNATEIP.AllocationId'
      SubnetId: !Ref 'SecondaryClientSubnet'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecondaryAZNAT'
    Type: AWS::EC2::NatGateway
  SecondaryAZNATEIP:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecondaryAZNATEIP'
    Type: AWS::EC2::EIP
  SecondaryClientSubnet:
    Properties:
      AvailabilityZone: !Ref 'SecondaryAvailabilityZone'
      CidrBlock: !Ref 'SecondaryClientSubnetCIDR'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecondaryClientSubnet'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  SecondaryManagementSubnet:
    Properties:
      AvailabilityZone: !Ref 'SecondaryAvailabilityZone'
      CidrBlock: !Ref 'SecondaryManagementSubnetCIDR'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecondaryManagementSubnet'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  SecondaryServerSubnet:
    Properties:
      AvailabilityZone: !Ref 'SecondaryAvailabilityZone'
      CidrBlock: !Ref 'SecondaryServerSubnetCIDR'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecondaryServerSubnet'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  VPC:
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: !Ref 'VPCTenancy'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
    Type: AWS::EC2::VPC
  VPCiGWAttachment:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment

